{"name":"Obfuscation","tagline":"Implementation of cryptographic program obfuscation","body":"# Implementation of Cryptographic Program Obfuscation\r\n\r\nThis code presents several implementations of cryptographic program obfuscation,\r\nas listed in the following table:\r\n\r\nScheme | ePrint Reference | Status\r\n------ | ---------------- | ------\r\nAnanth, Gupta, Ishai, Sahai (AGIS) | [2014/222](https://eprint.iacr.org/2014/222) |\r\nSahai, Zhandry (SZ) | [2014/773](https://eprint.iacr.org/2014/773) |\r\nZimmerman (Z) | [2014/776](https://eprint.iacr.org/2014/776) | alpha\r\n\r\nA discussion of the AGIS implementation appears in the work:\r\n\r\n\"Implementing Cryptographic Program Obfuscation.\" Daniel Apon, Yan Huang,\r\nJonathan Katz, Alex J. Malozemoff. Cryptology ePrint Archive 2014/779.\r\nhttps://eprint.iacr.org/2014/779.\r\n\r\nAll schemes use the graded encoding scheme of Coron et al. (CRYPTO,\r\n2013. https://eprint.iacr.org/2013/183).  The implementation is in a mix of\r\nPython and C, using [Sage](http://sagemath.org), [GNU GMP](https://gmplib.org)\r\nand [OpenMP](http://openmp.org).  <b>The code is under active development, and\r\nmay not be stable!</b> I will try to keep the master branch in a working state\r\n(most of the time), though.\r\n\r\nInstructions for building and running the code are in code/README.md, and\r\nscripts for running experiments and processing the results are in the scripts/\r\ndirectory.  Full traces of all the experiments found in the above paper can be\r\nfound in the scripts/results/ directory.\r\n\r\nFor any questions/comments, please e-mail amaloz at cs dot umd dot edu.\r\n\r\n## Challenges\r\n\r\nIn order to aid in the cryptanalysis of cryptographic program obfuscation, we\r\nplan to release a series of obfuscated point functions (that is, functions that\r\noutput 0 on all inputs except one), with the goal of the attacker being to learn\r\nthe hidden point.  The following table lists the available/broken challenges.\r\n\r\nChallenge | Link | Approach | Date Broken | Broken By\r\n--------- | ---- | -------- | ----------- | ---------\r\n14-bit point function; 60-bit security parameter | [Link](https://www.dropbox.com/s/85d03o0ny3b1c0c/point-14.circ.obf.60.zip) (23.96) | AGIS | 18 Oct 2014 | Daniel J. Bernstein, Andreas Huelsing, Tanja Lange, Ruben Niederhagen\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}